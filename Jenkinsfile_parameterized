#!groovy
@Library(value="Infrastructure") _

properties([
        parameters([
                string(name: 'PRODUCT_NAME', defaultValue: 'finrem', description: 'Financial Remedy'),
                string(name: 'APP', defaultValue: 'dgcs', description: 'Financial Remedy Document Generator Client'),
                string(name: 'TYPE', defaultValue: 'java', description: ''),
                string(name: 'ENVIRONMENT', defaultValue: 'saat', description: 'Environment where code should be built and deployed'),
                choice(name: 'SUBSCRIPTION', choices: 'sandbox\nnonprod\nprod', description: 'Azure subscriptions available to build in')
    ])
])

def secrets = [
    'finrem-${env}'              : [
        secret("pdf-service-access-key", "PDF_SERVICE_ACCESS_KEY"),
        secret("idam-secret" ,"OAUTH2_CLIENT_FINREM"),
        secret("finrem-doc-s2s-auth-secret", "AUTH_PROVIDER_SERVICE_CLIENT_KEY")    ],
    'docmosisiaasdevkv': [
        secret("docmosis-api-key", "PDF_SERVICE_ACCESS_KEY"),
        secret("docmosis-endpoint", "PDF_SERVICE_BASEURL"),
        secret("docmosis-endpoint", "PDF_SERVICE_HEALTH_URL")
    ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [ $class: 'AzureKeyVaultSecret',
      secretType: 'Secret',
      name: secretName,
      version: '',
      envVariable: envVar
    ]
}

withParameterizedPipeline(params.TYPE, params.PRODUCT_NAME, params.APP, params.ENVIRONMENT, params.SUBSCRIPTION) {
    loadVaultSecrets(secrets)

    after('functionalTest:aat') {
        publishHTML target: [
            reportDir            : "target/site/serenity/",
            reportFiles          : "index.html",
            reportName           : "AAT Functional Tests",
            alwaysLinkToLastBuild: true
        ]
    }
}
